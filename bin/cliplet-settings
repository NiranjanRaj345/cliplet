#!/usr/bin/env python3
"""
Cliplet Settings - Production Entry Point

This is the main executable for the Cliplet settings application.
"""

import sys
import os
import argparse
import logging
from pathlib import Path

# Add the absolute source directory to Python path for module resolution
src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src'))
if src_path not in sys.path:
    sys.path.insert(0, src_path)

try:
    from cliplet.config import ConfigManager
    from cliplet.ui.settings import SettingsApplication
    from cliplet.utils.logging import setup_logging
except ImportError as e:
    print(f"Error: Failed to import clipboard manager modules: {e}", file=sys.stderr)
    print("Please ensure the application is properly installed.", file=sys.stderr)
    sys.exit(1)

def main():
    """Main entry point for the settings application"""
    parser = argparse.ArgumentParser(
        description="Cliplet Settings",
        prog="cliplet-settings"
    )
    
    parser.add_argument(
        '--config', '-c',
        type=Path,
        help="Path to configuration file"
    )
    
    parser.add_argument(
        '--version', '-v',
        action='version',
        version='%(prog)s 1.0.0'
    )
    
    parser.add_argument(
        '--reset',
        action='store_true',
        help="Reset all settings to defaults"
    )
    
    parser.add_argument(
        '--export',
        type=Path,
        help="Export configuration to file"
    )
    
    parser.add_argument(
        '--import',
        type=Path,
        dest='import_file',
        help="Import configuration from file"
    )
    
    args = parser.parse_args()
    
    # Setup basic logging
    setup_logging(level='WARNING', console=True)
    
    try:
        # Load configuration
        config = ConfigManager(args.config)
        
        # Handle command line operations
        if args.reset:
            config.reset()
            config.save()
            print("Configuration reset to defaults")
            return
        
        if args.export:
            if config.export_config(args.export):
                print(f"Configuration exported to {args.export}")
            else:
                print("Failed to export configuration")
                sys.exit(1)
            return
        
        if args.import_file:
            if config.import_config(args.import_file):
                config.save()
                print(f"Configuration imported from {args.import_file}")
            else:
                print("Failed to import configuration")
                sys.exit(1)
            return
        
        # Start GUI application
        app = SettingsApplication(config)
        sys.exit(app.run())
        
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()